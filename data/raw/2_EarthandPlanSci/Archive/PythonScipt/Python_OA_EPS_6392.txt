# Step 1: Extract the relevant cells from Spreadsheet_Guide.xlsx (Sheet1)
import pandas as pd

# Read the guide sheet
guide_path = 'Spreadsheet_Guide.xlsx'
guide_df = pd.read_excel(guide_path, sheet_name='Sheet1', engine='calamine', header=None)

# List of cell coordinates (row, col) as per user instruction (0-indexed)
cells = [
    (19, 4), (6, 4), (7, 4), (8, 4), (9, 4), (10, 4), (11, 4), (12, 4), (13, 4), (14, 4),
    (15, 4), (16, 4), (17, 4), (18, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4)
]

# Extract the values from the specified cells
cell_values = [guide_df.iloc[row, col] for row, col in cells]

# Print the extracted values for confirmation
print(cell_values)

# Step 2: Load the OA_EPS_6392.csv file
oa_df = pd.read_csv('OA_EPS_6392.csv', encoding='UTF-8-SIG')

# Show the head of the OA CSV for context
print(oa_df.head())

# Step 3: Add/compute linguistic metrics as per the guide for each row in the OA_EPS_6392.csv
import numpy as np
import re

def count_words(text):
    if pd.isnull(text):
        return 0
    return len(str(text).split())

def count_sentences(text):
    if pd.isnull(text):
        return 0
    # Simple sentence split by period, exclamation, question mark
    return len(re.findall(r'[.!?]+', str(text)))

def avg_sentence_length(text):
    words = count_words(text)
    sentences = count_sentences(text)
    if sentences == 0:
        return np.nan
    return round(words / sentences, 2)

# Calculate metrics for the 'Abstract' column
oa_df['Word Count'] = oa_df['Abstract'].apply(count_words)
oa_df['Sentence Count'] = oa_df['Abstract'].apply(count_sentences)
oa_df['Average Sentence Length'] = oa_df['Abstract'].apply(avg_sentence_length)

# Show the updated head with new columns
print(oa_df.head())